# Stage 1: Base PHP environment with extensions and dependencies
FROM php:8.4-fpm-alpine AS base

# Install system dependencies and PHP extensions
RUN apk update && apk upgrade --no-cache && apk add --no-cache \
    icu-dev \
    postgresql-dev \
    protobuf-dev \
    linux-headers \
    && docker-php-ext-configure pgsql -with-pgsql=/usr/local/pgsql \
    && docker-php-ext-install -j$(nproc) \
        pdo \
        pdo_pgsql \
        pgsql \
        intl \
        opcache \
    && docker-php-ext-configure opcache --enable-opcache \
    && pecl install protobuf \
    && docker-php-ext-enable protobuf \
    && apk del --no-cache linux-headers

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

WORKDIR /var/www/html
COPY emush/Api ./

# Install production dependencies
ENV COMPOSER_ALLOW_SUPERUSER=1
RUN composer install --no-dev --optimize-autoloader --classmap-authoritative --no-interaction --no-progress --prefer-dist

# Stage 2: Final production image
FROM base AS production

# Copy PHP configuration files
COPY php.ini /usr/local/etc/php/conf.d/99-production.ini
COPY php-fpm.conf /usr/local/etc/php-fpm.d/zzz-production.conf

WORKDIR /var/www/html

# Copy vendor from base stage
COPY --from=base /var/www/html/vendor ./vendor

# Ensure JWT directory exists and is writable by application user
RUN mkdir -p config/jwt \
    && chown -R www-data:www-data config/jwt \
    && chmod 700 config/jwt

# Warm up cache and set permissions
RUN php bin/console cache:clear --env=prod --no-debug \
    && php bin/console cache:warmup --env=prod --no-debug \
    && chown -R www-data:www-data var \
    && chmod -R 755 var \
    && chown -R www-data:www-data public \
    && chmod -R 755 public

USER www-data

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD php-fpm -t || exit 1

EXPOSE 9000

CMD ["php-fpm"]

