name: emush

services:
  emush-web:
    container_name: emush-web
    build:
      context: .
      dockerfile: Dockerfile.web
    networks:
      - emush-network
      - traefik-proxy
    restart: unless-stopped
    depends_on:
      - emush-api
    volumes:
      - api-public:/var/www/html/public:ro
    labels:
      - traefik.enable=true
      - traefik.http.routers.emush-api.rule=Host(`api.emush.${DOMAIN}`)
      - traefik.http.routers.emush-api.entrypoints=websecure
      - traefik.http.routers.emush-api.tls.certresolver=letsencrypt
      - traefik.http.services.emush-api.loadbalancer.server.port=80
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -o /dev/null http://localhost/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s
  
  emush-app:
    container_name: emush-app
    build:
      context: .
      dockerfile: Dockerfile.app
    networks:
      - emush-network
      - traefik-proxy
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - emush-web
    labels:
      - traefik.enable=true
      - traefik.http.routers.emush-app.rule=Host(`emush.${DOMAIN}`)
      - traefik.http.routers.emush-app.entrypoints=websecure
      - traefik.http.routers.emush-app.tls.certresolver=letsencrypt
      - traefik.http.services.emush-app.loadbalancer.server.port=5173
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5173/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s

  emush-api:
    container_name: emush-api
    build:
      context: .
      dockerfile: Dockerfile.api
    networks:
      - emush-network
      - traefik-proxy
    restart: unless-stopped
    env_file:
      - .env
    depends_on:
      - emush-database
    volumes:
      - api-public:/var/www/html/public
      - jwt-keys:/var/www/html/config/jwt
    healthcheck:
      test: ["CMD", "php-fpm", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  emush-database:
    container_name: emush-database
    build:
      context: .
      dockerfile: Dockerfile.db
    networks:
      - emush-network
    restart: unless-stopped
    environment:
      POSTGRES_USER: emush
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: emush
      POSTGRES_MULTIPLE_DATABASES: eternaltwin.prod
    volumes:
      - emush-database-data:/var/lib/postgresql/data
      - ./database-init.sh:/docker-entrypoint-initdb.d/database-initdb.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U emush -d emush"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s

  emush-eternaltwin:
    container_name: emush-eternaltwin
    build:
      context: .
      dockerfile: Dockerfile.eternaltwin
      args:
        UID: ${UID:-1000}
        GID: ${UID:-1000}
    depends_on:
      - emush-database
    networks:
      - emush-network
      - traefik-proxy  # Ajout du r√©seau Traefik
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS -o /dev/null http://localhost:50320/ || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    labels:
      - traefik.enable=true
      - traefik.http.routers.emush-eternaltwin.rule=Host(`eternaltwin.${DOMAIN}`)
      - traefik.http.routers.emush-eternaltwin.entrypoints=websecure
      - traefik.http.routers.emush-eternaltwin.tls.certresolver=letsencrypt
      - traefik.http.services.emush-eternaltwin.loadbalancer.server.port=50320

volumes:
  emush-database-data:
    driver: local
  api-public:
    driver: local
  jwt-keys:
    driver: local

networks:
  emush-network:
    driver: bridge
